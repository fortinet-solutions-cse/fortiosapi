#!/bin/bash
#
#    fortinet-configure-openstack
#    Copyright (C) 2016 Fortinet  Ltd.
#
#    Authors: Nicolas Thomss  <nthomasfortinet.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -ex

echo "This script helps configure any openstack deployed by juju "

PKGS=" python-keystone python-neutronclient python-novaclient python-glanceclient python-openstackclient python-heatclient"
dpkg -l $PKGS > /dev/null || sudo apt install -y $PKGS


NEUTRON_EXT_NET_GW="10.10.10.1"
NEUTRON_EXT_NET_CIDR="10.10.10.0/23"

NEUTRON_EXT_NET_NAME="ext_net" # Unused
NEUTRON_DNS=$NEUTRON_EXT_NET_GW
NEUTRON_FLOAT_RANGE_START="10.10.11.12"
NEUTRON_FLOAT_RANGE_END="10.10.11.253"

NEUTRON_FIXED_NET_CIDR="192.168.16.0/22"


#Check if VIP is set on keystone
keystone_VIP=`juju config keystone| python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"vip\"][\"value\"]"||true`

if [ -n "$keystone_VIP" ]
then
    keystone=$keystone_VIP
else
    #if os-public-hostname is set and not VIP assume we need to use those at OpenStack endpoints.
    keystone_PUBENDPOINT=`juju config keystone| python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"os-public-hostname\"][\"value\"]"||true`
    if [ -n "$keystone_PUBENDPOINT" ]
    then
	## will need to add the PUBENPOINT to the different services interfaces to enable access on ob-num+2 network.
	##Â Assume a fresh install where the unit ID is 0 keystone/0 for example (TO BE FIXED)
	unset DEVICE
	for service in keystone cinder glance neutron-api nova-cloud-controller ceph-radosgw
	do
	    DEVICE=`juju ssh ${service}/0 "ip route" | grep 172.27.$((obnum+2)). |head -1 | awk '{ print $3}'`
	    # assuming the os-public-name are IPs not names will fail if not set
	    OSPUBLICIP=`juju config  ${service}| python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"os-public-hostname\"][\"value\"]"||true`
	    [ -n "$OSPUBLICIP" ] &&  juju ssh ${service}/0 "sudo ifconfig $DEVICE:1 $OSPUBLICIP"
	done
	keystone=$keystone_PUBENDPOINT
    else
	keystone=$(juju status keystone --format=yaml | grep public-address | head -1 | awk '{print $2}')
    fi
fi


echo "export SERVICE_ENDPOINT=http://$keystone:5000/v2.0/
unset SERVICE_TOKEN
unset SERVICE_ENDPOINT
unset OS_PROJECT_NAME 
export OS_AUTH_URL=http://$keystone:5000/v2.0/
export OS_USERNAME=$(juju config keystone | python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"admin-user\"][\"value\"]")
export OS_PASSWORD=$(juju config keystone | python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"admin-password\"][\"value\"]")
export OS_TENANT_NAME=admin
export OS_REGION_NAME=$(juju config keystone | python -c "import yaml; import sys; print yaml.load(sys.stdin)[\"settings\"][\"region\"][\"value\"]")
" > ~/nova.rc

source ~/nova.rc

# Determine the tenant id for the configured tenant name.
export TENANT_ID="$(openstack project list | grep $OS_TENANT_NAME | awk '{ print $2 }')"

if [ "$TENANT_ID" = "" ]; then
	echo "Unable to find tenant ID, keystone auth problem"
	exit 2
fi

echo "Configuring Openstack Neutron Networking"
## from https://jujucharms.com/u/openstack-charmers-next/neutron-gateway/

#create ext network with neutron for floating IPs
neutron net-show ext_net > /dev/null 2>&1 || neutron net-create ext_net --tenant-id $TENANT_ID -- --router:external=True --provider:network_type flat --provider:physical_network physnet1 
EXTERNAL_NETWORK_ID=$(neutron net-show ext_net | grep " id" | awk '{print $4}')
neutron subnet-show ext_net_subnet > /dev/null 2>&1 || neutron subnet-create ext_net $NEUTRON_EXT_NET_CIDR --name ext_net_subnet --tenant-id $TENANT_ID \
--allocation-pool start=$NEUTRON_FLOAT_RANGE_START,end=$NEUTRON_FLOAT_RANGE_END \
--gateway $NEUTRON_EXT_NET_GW --disable-dhcp --dns_nameservers $NEUTRON_DNS list=true

#Create mgmt network for neutron for tenant VMs
neutron net-show mgmt > /dev/null 2>&1 || neutron net-create mgmt
neutron subnet-show mgmt_subnet > /dev/null 2>&1 || neutron subnet-create mgmt $NEUTRON_FIXED_NET_CIDR -- --name mgmt_subnet --dns_nameservers list=true $NEUTRON_DNS
SUBNET_ID=$(neutron subnet-show mgmt_subnet | grep " id" | awk '{print $4}')

#Create router for external network and mgmt network
neutron router-show provider-router > /dev/null 2>&1 || neutron router-create --tenant-id $TENANT_ID provider-router
ROUTER_ID=$(neutron router-show provider-router | grep " id" | awk '{print $4}')

#neutron net-create --provider:network_type flat --provider:physical_network physnet1 --router:external=true  external
#neutron router-gateway-clear provider-router || true
# new linked to physnet1
neutron router-gateway-set provider-router ext_net || true

#neutron router-gateway-set $ROUTER_ID $EXTERNAL_NETWORK_ID
## make it always ok to have it indempodent.
neutron router-interface-add $ROUTER_ID $SUBNET_ID || true



#Configure the default security group to allow ICMP and SSH
openstack security group rule create --proto icmp default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 22 default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 80 default || echo "should have been created already"
openstack security group rule create --proto tcp --dst-port 443 default || echo "should have been created already"
#port for RDP
openstack security group rule create --proto tcp --dst-port 3389 default || echo "should have been created already"


##make wide open
openstack security group rule create --proto tcp --dst-port 1:65535  default || echo "should have been created already"
openstack security group rule create --proto udp --dst-port 1:65535  default || echo "should have been created already"


#Upload a default SSH key
openstack keypair create  --public-key ~/.ssh/id_rsa.pub default  || echo "asssuming key is already uploaded"

#Remove the m1.tiny as it is too small for Ubuntu.
for flavor in m1.tiny m1.small m1.medium m1.large m1.xlarge
do
openstack  flavor delete $flavor || true
done
openstack flavor create m1.small --id auto --ram 1024 --disk 20 --vcpus 1
openstack flavor create m1.medium --id auto --ram 2048 --disk 20 --vcpus 2
openstack flavor create m1.large --id auto --ram 4096 --disk 20 --vcpus 4

#Modify quotas for the tenant to allow large deployments
openstack quota  set --ram 204800 --cores 200 --instances 100 admin
neutron quota-update --security-group 100 --security-group-rule 500 

#setup heat
juju run-action heat/0 domain-setup || echo "heat not installed"


echo "Uploading images to glance"

#Upload images to glance
folder=$HOME/cloud-images

openstack image show  "Trusty x86_64" > /dev/null 2>&1 || openstack image create --disk-format qcow2 --container-format bare --public  "Trusty x86_64"  --file  $folder/trusty-server-cloudimg-amd64-disk1.img 
openstack image show  "Centos 7 x86_64" > /dev/null 2>&1 || openstack image create --disk-format qcow2 --container-format bare  --public  "Centos 7 x86_64"  --file  $folder/CentOS-7-x86_64-GenericCloud.qcow2
openstack image show  "Cirros 0.3.4" > /dev/null 2>&1 || openstack image create --disk-format qcow2 --container-format bare  --public  "Cirros 0.3.4"  --file  $folder/cirros-0.3.4-x86_64-disk.img
 
